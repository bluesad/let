# -*- coding: utf-8 -*-'''Created on 2012-3-19@author: zongzong'''from core.basehandler import BaseHandlerfrom db.mongo import Mongoimport datetime, hashlibfrom tornado.web import authenticatedfrom views.decorators import routefrom views.decorators import role_requiredfrom models.user import Userfrom models.customer import Custormerfrom views.paginator import Paginator@route('/manage')class ManagerHandler(BaseHandler):       @authenticated       @role_required('/manage')    def post(self):             cname = self.get_argument("cname", None)        yname = self.current_user['_id']        status = self.get_argument("status", None)                #page info        page = self.get_argument('page', 1)        page = page if page >= 1 else 1        #get the document count param        count = self.get_argument('count', 10)        count = count if count >= 1 else 10                 custormers = Custormer.getCustormers(cname, status, yname)        #create a Paginator object        paginator = Paginator(custormers, page, count, len(custormers))                template_values = {}        template_values['cname'] = cname        template_values['status'] = status        template_values['paginator'] = paginator        self.render_template('/site/manage.html', **template_values)    @authenticated    @role_required('/manage')    def get(self):        yname = self.current_user['_id']        custormers = Custormer.getAllCustormers(yname)        #page info        page = self.get_argument('page', 1)        page = page if page >= 1 else 1        #get the document count param        count = self.get_argument('count', 10)        count = count if count >= 1 else 10        paginator = Paginator(custormers, page, count, len(custormers))                template_values = {}#        template_values['custormers'] = custormers        template_values['cname'] = ' '        template_values['status'] = 0        template_values['paginator'] = paginator                self.render_template('/site/manage.html', **template_values)        @route('/custorm_add')class AddCustormHandler(BaseHandler):        @authenticated    @role_required('/custorm_add')    def get(self):        template_values = {}        template_values['next'] = self.get_argument('next', '/')        self.render_template('/site/custorm_add.html', **template_values)            @authenticated    @role_required('/custorm_add')    def post(self):          yname = self.get_username()        status = 0 #有效        address = self.get_argument("address", None)        phonenum = self.get_argument("phonenum", None)        cname = self.get_argument("cname", None)        begin_at = self.get_argument("begin_at", None)        suspended_at = self.get_argument("suspended_at", None)        continue_to = self.get_argument("continue_to", None)         begin_ip = self.get_argument("begin_ip", None)        suspended_ip = self.get_argument("suspended_ip", None)         ctype = self.get_argument("type", None)        price = self.get_argument("price", None)         #        password = self.get_argument("password", None)                    Custormer.insertCustorm(yname, status, cname, begin_at, suspended_at, continue_to, ctype, address, phonenum, price, begin_ip, suspended_ip)               #/*signup for cusormer**/        user = User.lookup(cname)        if not user:            user = User.instance(cname, '123456', 3)            Mongo.db.ui['users'].insert(user)        #/***/        self.redirect("/manage")    @route('/custorm_mod')class ModifiedCustormHandler(BaseHandler):        @authenticated    @role_required('/custorm_mod')    def get(self):        _cid = self.get_argument("name", None)        status = self.get_argument("status", None)        percent = self.get_argument("percent", None)        begin_at = self.get_argument("begin_at", None)        suspended_at = self.get_argument("suspended_at", None)         Custormer.updateCustorm(status, percent, begin_at, suspended_at)          custormers = Custormer.getAllCustormers()        template_values = {}        template_values['custormers'] = custormers        self.render_template('/site/manage.html', **template_values)        @route('/custorm_del')class DelCustormHandler(BaseHandler):             def post(self):        _cid = self.get_argument("c_id", None)        Custormer.delCustorm(_cid, 1)          self.finish("finished")                            